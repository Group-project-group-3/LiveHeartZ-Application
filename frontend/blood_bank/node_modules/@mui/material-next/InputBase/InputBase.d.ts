import * as React from 'react';
import { CSSInterpolation } from '@mui/system';
import { DefaultComponentProps, OverrideProps } from '@mui/types';
import { InputBaseInputSlotProps, InputBaseOwnerState, InputBaseRootSlotProps, InputBaseTypeMap } from './InputBase.types';
export declare function rootOverridesResolver(props: InputBaseRootSlotProps, styles: Record<string, CSSInterpolation>): CSSInterpolation[];
export declare const InputBaseRoot: import("@mui/styled-engine").StyledComponent<import("@mui/system").MUIStyledCommonProps<import("..").Theme> & {
    ownerState: InputBaseOwnerState;
}, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof React.ClassAttributes<HTMLDivElement> | keyof React.HTMLAttributes<HTMLDivElement>>, {}>;
export declare function inputOverridesResolver(props: InputBaseInputSlotProps, styles: Record<string, CSSInterpolation>): CSSInterpolation[];
export declare const InputBaseInput: import("@mui/styled-engine").StyledComponent<import("@mui/system").MUIStyledCommonProps<import("..").Theme> & {
    ownerState: InputBaseOwnerState;
}, Pick<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, keyof React.ClassAttributes<HTMLInputElement> | keyof React.InputHTMLAttributes<HTMLInputElement>>, {}>;
/**
 * `InputBase` contains as few styles as possible.
 * It aims to be a simple building block for creating an input.
 * It contains a load of style reset and some state logic.
 */
declare const InputBase: InputBaseComponent;
interface InputBaseComponent {
    <C extends React.ElementType>(props: {
        /**
         * The component used for the input node.
         * Either a string to use a HTML element or a component.
         * @default 'input'
         */
        inputComponent?: C;
    } & OverrideProps<InputBaseTypeMap, C>): JSX.Element | null;
    (props: DefaultComponentProps<InputBaseTypeMap>): JSX.Element | null;
    propTypes?: any;
}
export default InputBase;
