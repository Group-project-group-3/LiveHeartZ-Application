'use client';

import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _span;
const _excluded = ["children", "component", "disabled", "error", "filled", "focused", "margin", "required", "size", "variant", "slots", "slotProps"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_composeClasses as composeClasses, useSlotProps } from '@mui/base';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { useThemeProps, styled } from '../styles';
import useFormControl from '../FormControl/useFormControl';
import formHelperTextClasses, { getFormHelperTextUtilityClasses } from './formHelperTextClasses';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    classes,
    contained,
    size,
    disabled,
    error,
    filled,
    focused,
    required
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
  };
  return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
};
const FormHelperTextRoot = styled('p', {
  name: 'MuiFormHelperText',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
  }
})(({
  theme,
  ownerState
}) => {
  const {
    vars: tokens
  } = theme;
  const pxFontSize = theme.sys.typescale.body.small.size;
  const lineHeight = `calc(${tokens.sys.typescale.body.small.lineHeight} / ${pxFontSize})`;
  return _extends({
    '--md-comp-form-helper-text-color': tokens.sys.color.onSurfaceVariant,
    '--md-comp-form-helper-text-font-family': tokens.sys.typescale.body.small.family,
    '--md-comp-form-helper-text-font-size': theme.typography.pxToRem(pxFontSize),
    // the pxToRem should be moved to typescale in the future,
    '--md-comp-form-helper-text-font-weight': tokens.sys.typescale.body.small.weight,
    '--md-comp-form-helper-text-line-height': lineHeight,
    '--md-comp-form-helper-text-disabled-color': tokens.sys.color.onSurface,
    '--md-comp-form-helper-text-disabled-opacity': 0.38,
    '--md-comp-form-helper-text-error-color': tokens.sys.color.error,
    color: 'var(--md-comp-form-helper-text-color)',
    fontFamily: 'var(--md-comp-form-helper-text-font-family)',
    fontSize: 'var(--md-comp-form-helper-text-font-size)',
    lineHeight: `var(--md-comp-form-helper-text-line-height)`,
    textAlign: 'left',
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses.disabled}`]: {
      color: 'color-mix(in srgb, var(--md-comp-form-helper-text-disabled-color) calc(var(--md-comp-form-helper-text-disabled-opacity) * 100%), transparent)'
    },
    [`&.${formHelperTextClasses.error}`]: {
      color: 'var(--md-comp-form-helper-text-error-color)'
    }
  }, ownerState.size === 'small' && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 16,
    marginRight: 16
  });
});
const FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(inProps, forwardedRef) {
  var _ref, _slots$root;
  const props = useThemeProps({
    props: inProps,
    name: 'MuiFormHelperText'
  });
  const {
      children,
      component = 'p',
      disabled: disabledProp,
      error: errorProp,
      filled: filledProp,
      focused: focusedProp,
      required: requiredProp,
      size: sizeProp,
      variant: variantProp,
      slots = {},
      slotProps = {}
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const muiFormControl = useFormControl();
  const variant = (_ref = variantProp != null ? variantProp : muiFormControl == null ? void 0 : muiFormControl.variant) != null ? _ref : '';
  const ownerState = _extends({}, props, {
    component,
    contained: variant === 'filled' || variant === 'outlined',
    variant,
    size: sizeProp != null ? sizeProp : muiFormControl == null ? void 0 : muiFormControl.size,
    disabled: disabledProp != null ? disabledProp : muiFormControl == null ? void 0 : muiFormControl.disabled,
    error: errorProp != null ? errorProp : muiFormControl == null ? void 0 : muiFormControl.error,
    filled: filledProp != null ? filledProp : muiFormControl == null ? void 0 : muiFormControl.filled,
    focused: focusedProp != null ? focusedProp : muiFormControl == null ? void 0 : muiFormControl.focused,
    required: requiredProp != null ? requiredProp : muiFormControl == null ? void 0 : muiFormControl.required
  });
  const classes = useUtilityClasses(ownerState);
  const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : FormHelperTextRoot;
  const rootProps = useSlotProps({
    elementType: RootSlot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      as: component,
      ref: forwardedRef
    },
    ownerState,
    className: [classes.root]
  });
  return /*#__PURE__*/_jsx(RootSlot, _extends({}, rootProps, {
    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
    _span || (_span = /*#__PURE__*/_jsx("span", {
      className: "notranslate",
      children: "\u200B"
    })) : children
  }));
});
process.env.NODE_ENV !== "production" ? FormHelperText.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: PropTypes.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: PropTypes.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: PropTypes.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: PropTypes.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: PropTypes.oneOf(['dense']),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: PropTypes.bool,
  /**
   * The props used for each slot inside the FormHelperText.
   * @default {}
   */
  slotProps: PropTypes.shape({
    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])
  }),
  /**
   * The components used for each slot inside the FormHelperText.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: PropTypes.shape({
    root: PropTypes.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])
} : void 0;
export default FormHelperText;