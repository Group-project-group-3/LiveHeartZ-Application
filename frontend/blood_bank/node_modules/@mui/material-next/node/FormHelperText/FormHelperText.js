"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _styles = require("../styles");
var _useFormControl = _interopRequireDefault(require("../FormControl/useFormControl"));
var _formHelperTextClasses = _interopRequireWildcard(require("./formHelperTextClasses"));
var _jsxRuntime = require("react/jsx-runtime");
var _span;
const _excluded = ["children", "component", "disabled", "error", "filled", "focused", "margin", "required", "size", "variant", "slots", "slotProps"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const useUtilityClasses = ownerState => {
  const {
    classes,
    contained,
    size,
    disabled,
    error,
    filled,
    focused,
    required
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', error && 'error', size && `size${(0, _utils.unstable_capitalize)(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
  };
  return (0, _base.unstable_composeClasses)(slots, _formHelperTextClasses.getFormHelperTextUtilityClasses, classes);
};
const FormHelperTextRoot = (0, _styles.styled)('p', {
  name: 'MuiFormHelperText',
  slot: 'Root',
  overridesResolver: (props, styles) => {
    const {
      ownerState
    } = props;
    return [styles.root, ownerState.size && styles[`size${(0, _utils.unstable_capitalize)(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
  }
})(({
  theme,
  ownerState
}) => {
  const {
    vars: tokens
  } = theme;
  const pxFontSize = theme.sys.typescale.body.small.size;
  const lineHeight = `calc(${tokens.sys.typescale.body.small.lineHeight} / ${pxFontSize})`;
  return (0, _extends2.default)({
    '--md-comp-form-helper-text-color': tokens.sys.color.onSurfaceVariant,
    '--md-comp-form-helper-text-font-family': tokens.sys.typescale.body.small.family,
    '--md-comp-form-helper-text-font-size': theme.typography.pxToRem(pxFontSize),
    // the pxToRem should be moved to typescale in the future,
    '--md-comp-form-helper-text-font-weight': tokens.sys.typescale.body.small.weight,
    '--md-comp-form-helper-text-line-height': lineHeight,
    '--md-comp-form-helper-text-disabled-color': tokens.sys.color.onSurface,
    '--md-comp-form-helper-text-disabled-opacity': 0.38,
    '--md-comp-form-helper-text-error-color': tokens.sys.color.error,
    color: 'var(--md-comp-form-helper-text-color)',
    fontFamily: 'var(--md-comp-form-helper-text-font-family)',
    fontSize: 'var(--md-comp-form-helper-text-font-size)',
    lineHeight: `var(--md-comp-form-helper-text-line-height)`,
    textAlign: 'left',
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${_formHelperTextClasses.default.disabled}`]: {
      color: 'color-mix(in srgb, var(--md-comp-form-helper-text-disabled-color) calc(var(--md-comp-form-helper-text-disabled-opacity) * 100%), transparent)'
    },
    [`&.${_formHelperTextClasses.default.error}`]: {
      color: 'var(--md-comp-form-helper-text-error-color)'
    }
  }, ownerState.size === 'small' && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 16,
    marginRight: 16
  });
});
const FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(inProps, forwardedRef) {
  var _ref, _slots$root;
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiFormHelperText'
  });
  const {
      children,
      component = 'p',
      disabled: disabledProp,
      error: errorProp,
      filled: filledProp,
      focused: focusedProp,
      required: requiredProp,
      size: sizeProp,
      variant: variantProp,
      slots = {},
      slotProps = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const muiFormControl = (0, _useFormControl.default)();
  const variant = (_ref = variantProp != null ? variantProp : muiFormControl == null ? void 0 : muiFormControl.variant) != null ? _ref : '';
  const ownerState = (0, _extends2.default)({}, props, {
    component,
    contained: variant === 'filled' || variant === 'outlined',
    variant,
    size: sizeProp != null ? sizeProp : muiFormControl == null ? void 0 : muiFormControl.size,
    disabled: disabledProp != null ? disabledProp : muiFormControl == null ? void 0 : muiFormControl.disabled,
    error: errorProp != null ? errorProp : muiFormControl == null ? void 0 : muiFormControl.error,
    filled: filledProp != null ? filledProp : muiFormControl == null ? void 0 : muiFormControl.filled,
    focused: focusedProp != null ? focusedProp : muiFormControl == null ? void 0 : muiFormControl.focused,
    required: requiredProp != null ? requiredProp : muiFormControl == null ? void 0 : muiFormControl.required
  });
  const classes = useUtilityClasses(ownerState);
  const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : FormHelperTextRoot;
  const rootProps = (0, _base.useSlotProps)({
    elementType: RootSlot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      as: component,
      ref: forwardedRef
    },
    ownerState,
    className: [classes.root]
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(RootSlot, (0, _extends2.default)({}, rootProps, {
    children: children === ' ' ? // notranslate needed while Google Translate will not fix zero-width space issue
    _span || (_span = /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      className: "notranslate",
      children: "\u200B"
    })) : children
  }));
});
process.env.NODE_ENV !== "production" ? FormHelperText.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: _propTypes.default.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: _propTypes.default.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: _propTypes.default.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: _propTypes.default.oneOf(['dense']),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: _propTypes.default.bool,
  /**
   * The props used for each slot inside the FormHelperText.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the FormHelperText.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    root: _propTypes.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['filled', 'outlined', 'standard']), _propTypes.default.string])
} : void 0;
var _default = exports.default = FormHelperText;