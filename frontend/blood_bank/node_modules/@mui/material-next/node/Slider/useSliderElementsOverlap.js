"use strict";
'use client';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSliderElementsOverlap;
var React = _interopRequireWildcard(require("react"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const overlapCompareFunctionByAxis = {
  horizontal: (firstElementRect, secondElementRect, margin) => firstElementRect.right + margin > secondElementRect.left,
  'horizontal-reverse': (firstElementRect, secondElementRect, margin) => secondElementRect.right + margin > firstElementRect.left,
  vertical: (firstElementRect, secondElementRect, margin) => secondElementRect.bottom + margin > firstElementRect.top
};
function getSliderElementsOverlap(elements, axis, margin) {
  const overlapArray = elements.map(() => false);
  for (let elementIndex = 0; elementIndex < elements.length - 1; elementIndex += 1) {
    const firstElementRect = elements[elementIndex].getBoundingClientRect();
    const secondElementRect = elements[elementIndex + 1].getBoundingClientRect();
    if (overlapCompareFunctionByAxis[axis](firstElementRect, secondElementRect, margin)) {
      overlapArray[elementIndex] = true;
      overlapArray[elementIndex + 1] = true;
    }
  }
  return overlapArray;
}
function useElementsOverlap(axis, margin = 0) {
  const elementsRefList = React.useRef([]);
  const [elementsOverlapArray, setElementsOverlapArray] = React.useState([]);
  const setRef = React.useCallback((elementIndex, ref) => {
    if (!!ref && elementsRefList.current[elementIndex] !== ref) {
      elementsRefList.current[elementIndex] = ref;
    }
  }, []);
  const getIsOverlapping = React.useCallback((elementIndex, lastActiveIndex) => {
    if (elementsRefList.current.length < 2) {
      return false;
    }
    return elementsOverlapArray[elementIndex] && lastActiveIndex === elementIndex;
  }, [elementsOverlapArray]);
  const onMove = React.useCallback(() => {
    if (elementsRefList.current.length > 1) {
      const updatedOverlap = getSliderElementsOverlap(elementsRefList.current, axis, margin);
      if (!(0, _base.areArraysEqual)(updatedOverlap, elementsOverlapArray)) {
        setElementsOverlapArray(updatedOverlap);
      }
    }
  }, [axis, elementsOverlapArray, margin]);
  return {
    setRef,
    getIsOverlapping,
    onMove
  };
}
function useSliderElementsOverlap(axis) {
  const {
    setRef: setThumbRef,
    getIsOverlapping: getIsThumbOverlapping,
    onMove: onThumbMove
  } = useElementsOverlap(axis);

  // ValueLabel -12px margin is required due to how its "inverted water drop"
  // shape is built with CSS. Might want to allow this to be configurable in the future.
  const {
    setRef: setValueLabelRef,
    getIsOverlapping: getIsValueLabelOverlapping,
    onMove: onValueLabelMove
  } = useElementsOverlap(axis, -12);
  const onThumbMoved = React.useCallback(() => {
    onThumbMove();
    onValueLabelMove();
  }, [onThumbMove, onValueLabelMove]);
  const debouncedOnThumbMoved = React.useMemo(() => (0, _utils.unstable_debounce)(onThumbMoved, 50), [onThumbMoved]);
  (0, _utils.unstable_useEnhancedEffect)(() => {
    onThumbMoved();
  }, [onThumbMoved]);
  return {
    setThumbRef,
    setValueLabelRef,
    getIsThumbOverlapping,
    getIsValueLabelOverlapping,
    onThumbMoved: debouncedOnThumbMoved
  };
}