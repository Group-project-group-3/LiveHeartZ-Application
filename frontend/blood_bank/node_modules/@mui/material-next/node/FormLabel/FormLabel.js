"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FormLabelRoot = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _styles = require("../styles");
var _useFormControl = _interopRequireDefault(require("../FormControl/useFormControl"));
var _formLabelClasses = _interopRequireWildcard(require("./formLabelClasses"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["children", "color", "component", "disabled", "error", "filled", "focused", "required", "slots", "slotProps"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const useUtilityClasses = ownerState => {
  const {
    classes,
    color,
    focused,
    disabled,
    error,
    filled,
    required
  } = ownerState;
  const slots = {
    root: ['root', `color${(0, _utils.unstable_capitalize)(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
    asterisk: ['asterisk', error && 'error']
  };
  return (0, _base.unstable_composeClasses)(slots, _formLabelClasses.getFormLabelUtilityClasses, classes);
};
const FormLabelRoot = exports.FormLabelRoot = (0, _styles.styled)('label', {
  name: 'MuiFormLabel',
  slot: 'Root',
  overridesResolver: ({
    ownerState
  }, styles) => {
    return [styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled];
  }
})(({
  theme,
  ownerState
}) => {
  const {
    vars: tokens
  } = theme;
  const pxFontSize = tokens.sys.typescale.body.large.size;
  const letterSpacing = `${theme.sys.typescale.body.large.tracking / pxFontSize}rem`;
  return {
    '--md-comp-form-label-color': tokens.sys.color.secondary,
    '--md-comp-form-label-font-family': tokens.sys.typescale.body.large.family,
    '--md-comp-form-label-font-size': theme.typography.pxToRem(pxFontSize),
    // the pxToRem should be moved to typescale in the future,
    '--md-comp-form-label-font-weight': tokens.sys.typescale.body.large.weight,
    '--md-comp-form-label-letter-spacing': letterSpacing,
    '--md-comp-form-label-line-height': '1.5rem',
    '--md-comp-form-label-disabled-color': tokens.sys.color.onSurface,
    '--md-comp-form-label-disabled-opacity': 0.38,
    '--md-comp-form-label-error-color': tokens.sys.color.error,
    '--md-comp-form-label-focus-color': tokens.sys.color[ownerState.color],
    color: 'var(--md-comp-form-label-color)',
    fontFamily: 'var(--md-comp-form-label-font-family)',
    fontSize: 'var(--md-comp-form-label-font-size)',
    fontWeight: 'var(--md-comp-form-label-font-weight)',
    lineHeight: 'var(--md-comp-form-label-line-height)',
    padding: 0,
    position: 'relative',
    [`&.${_formLabelClasses.default.focused}`]: {
      color: 'var(--md-comp-form-label-focus-color)'
    },
    [`&.${_formLabelClasses.default.disabled}`]: {
      color: 'color-mix(in srgb, var(--md-comp-form-label-disabled-color) calc(var(--md-comp-form-label-disabled-opacity) * 100%), transparent)'
    },
    [`&.${_formLabelClasses.default.error}`]: {
      color: 'var(--md-comp-form-label-error-color)'
    }
  };
});
const AsteriskComponent = (0, _styles.styled)('span', {
  name: 'MuiFormLabel',
  slot: 'Asterisk',
  overridesResolver: (_props, styles) => styles.asterisk
})(() => ({
  [`&.${_formLabelClasses.default.error}`]: {
    color: 'var(--md-comp-form-label-error-color)'
  }
}));
const FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(inProps, forwardedRef) {
  var _muiFormControl$color, _muiFormControl$disab, _muiFormControl$fille, _slots$root;
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiFormLabel'
  });
  const {
      children,
      color: colorProp = 'primary',
      component = 'label',
      disabled: disabledProp,
      error: errorProp,
      filled: filledProp,
      focused: focusedProp,
      required: requiredProp,
      slots = {},
      slotProps = {}
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const muiFormControl = (0, _useFormControl.default)();
  const required = requiredProp != null ? requiredProp : muiFormControl == null ? void 0 : muiFormControl.required;
  const ownerState = (0, _extends2.default)({}, props, {
    color: (_muiFormControl$color = muiFormControl == null ? void 0 : muiFormControl.color) != null ? _muiFormControl$color : colorProp,
    component,
    disabled: (_muiFormControl$disab = muiFormControl == null ? void 0 : muiFormControl.disabled) != null ? _muiFormControl$disab : disabledProp,
    error: errorProp != null ? errorProp : muiFormControl == null ? void 0 : muiFormControl.error,
    filled: (_muiFormControl$fille = muiFormControl == null ? void 0 : muiFormControl.filled) != null ? _muiFormControl$fille : filledProp,
    focused: focusedProp != null ? focusedProp : muiFormControl == null ? void 0 : muiFormControl.focused,
    required
  });
  const classes = useUtilityClasses(ownerState);
  const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : FormLabelRoot;
  const rootProps = (0, _base.useSlotProps)({
    elementType: RootSlot,
    externalSlotProps: slotProps.root,
    externalForwardedProps: other,
    additionalProps: {
      as: component,
      ref: forwardedRef
    },
    ownerState,
    className: [classes.root]
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(RootSlot, (0, _extends2.default)({}, rootProps, {
    children: [children, required && /*#__PURE__*/(0, _jsxRuntime.jsxs)(AsteriskComponent, {
      ownerState: ownerState,
      "aria-hidden": true,
      className: classes.asterisk,
      children: ["\u2009", '*']
    })]
  }));
});
process.env.NODE_ENV !== "production" ? FormLabel.propTypes /* remove-proptypes */ = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['error', 'info', 'primary', 'secondary', 'tertiary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: _propTypes.default.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: _propTypes.default.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: _propTypes.default.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: _propTypes.default.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: _propTypes.default.bool,
  /**
   * The props used for each slot inside the FormLabel.
   * @default {}
   */
  slotProps: _propTypes.default.shape({
    root: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
  }),
  /**
   * The components used for each slot inside the FormLabel.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: _propTypes.default.shape({
    root: _propTypes.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
} : void 0;
var _default = exports.default = FormLabel;